")
Claim_Info$File_Date <- as.character(Claim_Info$File_Date)
Claim_Info$File_Date
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date BETWEEN '4/1/2020' AND '4/30/2021'")
# Questions 1: Please write a query using Table 1 to list the claimants that are only in Wayne County, where the desired results of the query are reflected below.
sqldf("SELECT *
FROM Claimant_Info
WHERE County = 'Wayne'")
# Question 2:  Please write a query using Table 1 to get the count of claimants for each gender. Because Michigan does not require claimants to report their gender, some claimants have NULL gender values, which is usually categorized as “Unspecified”
sqldf("SELECT Gender, COUNT(Gender) as Count
FROM Claimant_Info
GROUP BY Gender")
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date BETWEEN '4/1/2020' AND '4/30/2021'")
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
#WHERE Status = 'Approved' AND File_Date BETWEEN '4/1/2020' AND '4/30/2021'")
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
")
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
#WHERE Status = 'Approved' AND File_Date BETWEEN '4/1/2020' AND '4/30/2021'")
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date BETWEEN '4/1/2020' AND '4/30/2021'")
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
")
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date = '4/18/2020'")
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date = '04/18/2020'")
library(tidyverse)
library(readxl)
library(sqldf)
library(ggthemes)
Claimant_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claimant_Info")
Claim_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claim_Info")
Claim_Info$File_Date <- as.Date(Claim_Info$File_Date)
Claim_Info$File_Date
class(Claim_Info$File_Date)
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date = '04/18/2020'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date BETWEEN '4/1/2020' AND '4/30/2021'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date >'4/1/2020' AND File_Date < '4/30/2021'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date >='4/1/2020' AND File_Date <= '4/30/2021'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date >= '4/1/2020'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date >= '4/18/2020'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date > '4/18/2020'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date < '4/18/2020'")
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date > '4/18/2020'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date > '4/1/2020'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date > '2020-04-06'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date < '2020-04-06'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date < '2020-04-06'
ORDER BY File_Date"
)
library(tidyverse)
library(readxl)
library(sqldf)
library(ggthemes)
ess <- read_csv("Data/ESS10.csv", show_col_types = FALSE)
# SQL to ggplot practice
# Creating a table of average and sum earnings by education
humm3 <- sqldf("SELECT edlvdahu as education_level, AVG(hinctnta) as avg_income, SUM(hinctnta) as sum_income, STDEV(hinctnta) as std, COUNT(*) as total_obs
FROM hu_ess
GROUP BY edlvdahu")
# Mock ESS data to make it simplier for illustrating conversions between dataframes
df1 <- data.frame(ID = c(1, 2, 3, 4, 5),
name = c("John", "Sandy", "Ashley", "David", "Eve"))
df2 <- data.frame(ID = c(3, 4, 6, 7, 8),
country = c("HU", "FR", "FI", "LT", "FR"))
df3 <- data.frame(ID = c(2, 6, 8, 4, 9),
gender = c(1, 2 ,2 ,1 ,2))
# Mock ESS data to make it simplier for illustrating conversions between dataframes
df1 <- data.frame(ID = c(1, 2, 3, 4, 5),
name = c("John", "Sandy", "Ashley", "David", "Eve"))
df2 <- data.frame(ID = c(3, 4, 6, 7, 8),
country = c("HU", "FR", "FI", "LT", "FR"))
df3 <- data.frame(ID = c(2, 6, 8, 4, 9),
gender = c(1, 2 ,2 ,1 ,2))
View(df1)
View(df2)
inner_join_result <- sqldf("SELECT df1.ID, name, country
FROM df1
INNER JOIN df2 ON df1.ID = df2.ID")
View(inner_join_result)
library(tidyverse)
library(readxl)
library(sqldf)
library(ggthemes)
Claimant_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claimant_Info")
Claim_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claim_Info")
Claim_Info$File_Date <- as.Date(Claim_Info$File_Date)
class(Claim_Info$File_Date)
View(df1)
View(df2)
View(Claim_Info)
View(Claimant_Info)
colnames(Claim_Info)
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) as 'Sum of Amount_Paid'
FROM Claimant_Info
INNER JOIN Claim_Info
ON Claimant_Info.Claim_ID = Claim_Info.Claim_ID")
colnames(Claim_Info)
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) as 'Sum of Amount_Paid'
FROM Claimant_Info
INNER JOIN Claim_Info ON Claimant_Info.Claim_ID = Claim_Info.Claim_ID")
colnames(Claimant_Info)
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) as 'Sum of Amount_Paid'
FROM Claimant_Info
INNER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID")
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) as 'Sum of Amount_Paid'
FROM Claimant_Info
INNER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
GROUP BY COUNTY")
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) as 'Sum of Amount_Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
GROUP BY COUNTY")
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) as 'Sum of Amount_Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County")
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) as 'Sum of Amount_Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County")
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) as 'Sum of Amount_Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County desc")
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) format=dollar13.0 'Sum of Amount_Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County desc")
View(Claimant_Info)
View(Claim_Info)
sqldf("
SELECT
County,
printf('$%.2f', SUM(Claim_Info.Amount_Paid)) AS 'Sum of Amount_Paid'
FROM
Claimant_Info
FULL OUTER JOIN
Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE
County NOT IN ('Cochise', 'Steuben')
GROUP BY
County
ORDER BY
County DESC
")
sqldf("
SELECT
County,
printf('$%f', SUM(Claim_Info.Amount_Paid)) AS 'Sum of Amount_Paid'
FROM
Claimant_Info
FULL OUTER JOIN
Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE
County NOT IN ('Cochise', 'Steuben')
GROUP BY
County
ORDER BY
County DESC
")
sqldf("
SELECT
County,
printf('$%.0f', SUM(Claim_Info.Amount_Paid)) AS 'Sum of Amount_Paid'
FROM
Claimant_Info
FULL OUTER JOIN
Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE
County NOT IN ('Cochise', 'Steuben')
GROUP BY
County
ORDER BY
County DESC
")
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) format=dollar13.0 'Sum of Amount_Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County desc")
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) AS 'Sum of Amount_Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County desc")
colnames(Claimant_Info)
Claimant_Info
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) AS 'Sum of Amount Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County desc")
colnames(Claimant_Info)
Claimant_Info
# Question 4: Please write a query using Table 1 and Table 2 to get the sum of the Amount_Paid for each county in Michigan
sqldf("SELECT Claimant_Info.County, SUM(Claim_Info.Amount_Paid) as 'Sum of Amount_Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info
ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
GROUP BY County")
# Question 4: Please write a query using Table 1 and Table 2 to get the sum of the Amount_Paid for each county in Michigan
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) AS 'Sum of Amount Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County desc")
# Questions 1: Please write a query using Table 1 to list the claimants that are only in Wayne County, where the desired results of the query are reflected below.
sqldf("SELECT *
FROM Claimant_Info
WHERE County = 'Wayne'")
sqldf("SELECT Gender, COUNT(Gender) as Count
FROM Claimant_Info
GROUP BY Gender")
View(Claimant_Info)
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date < '2020-04-06'
ORDER BY File_Date"
)
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date < 2020-04-06
ORDER BY File_Date"
)
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date < DATE('2020-04-06')
ORDER BY File_Date"
)
# Questions 1: Please write a query using Table 1 to list the claimants that are only in Wayne County, where the desired results of the query are reflected below.
sqldf("SELECT *
FROM Claimant_Info
WHERE County = 'Wayne'")
# Question 4: Please write a query using Table 1 and Table 2 to get the sum of the Amount_Paid for each county in Michigan
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) AS 'Sum of Amount Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County desc")
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info")
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date = '2020-04-21'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date '2020041'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date >= '2020041'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date >= '20200401'")
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved'")
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved'")
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND Amount_Paid BETWEEN 0 AND 1000")
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved'")
library(tidyverse)
library(readxl)
library(sqldf)
library(ggthemes)
Claimant_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claimant_Info")
Claim_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claim_Info")
#Claim_Info$File_Date <- as.Date(Claim_Info$File_Date)
class(Claim_Info$File_Date)
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date > '2020-04-05'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date < '2020-04-05'")
sqldf("SELECT *
FROM Claim_Info
WHERE File_Date < '2021-12-02'")
library(tidyverse)
library(readxl)
library(sqldf)
library(ggthemes)
Claimant_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claimant_Info")
Claim_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claim_Info")
Claim_Info$File_Date <- as.Date(Claim_Info$File_Date)
class(Claim_Info$File_Date)
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved'")
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND Claimant_ID = 8989")
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date = '2019-10-31'")
# Convert the date to the appropriate format (m/d/yyyy)
date <- as.Date("2019-10-31")
formatted_date <- format(date, "%m/%d/%Y")
# Execute the SQL query with the formatted date
result <- sqldf(paste("SELECT * FROM Claim_Info WHERE Status = 'Approved' AND File_Date = '", formatted_date, "'", sep=""))
# Convert the date to the appropriate format (m/d/yyyy)
date <- as.Date("2019-10-31")
formatted_date <- format(date, "%m/%d/%Y")
# Execute the SQL query with the formatted date
sqldf(paste("SELECT * FROM Claim_Info WHERE Status = 'Approved' AND File_Date = '", formatted_date, "'", sep=""))
View(result)
sqldf(paste("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date = '", formatted_date, "'"))
formatted_date
# Filter the data frame based on both criteria
filtered_df <- subset(Claim_Info, Status == 'Approved' & File_Date == as.Date("2019-10-31"))
View(filtered_df)
# Filter the data frame based on both criteria
subset(Claim_Info, Status == 'Approved' & File_Date == as.Date("2019-10-31"))
# Filter the data frame based on both criteria
sum(Claim_Info$File_Date == as.Date("2019-10-31"))
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date = '2019-10-31'")
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date = as.Date('2019-10-31)'")
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date = '2019-10-31'")
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date BETWEEN '4/1/2020' AND '4/30/2021'")
library(tidyverse)
library(readxl)
library(sqldf)
Claimant_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claimant_Info")
Claim_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claim_Info")
Claim_Info$File_Date <- as.Date(Claim_Info$File_Date)
class(Claim_Info$File_Date)
# Questions 1: Please write a query using Table 1 to list the claimants that are only in Wayne County, where the desired results of the query are reflected below.
sqldf("SELECT *
FROM Claimant_Info
WHERE County = 'Wayne'")
# Question 2:  Please write a query using Table 1 to get the count of claimants for each gender. Because Michigan does not require claimants to report their gender, some claimants have NULL gender values, which is usually categorized as “Unspecified”
sqldf("SELECT Gender, COUNT(Gender) as Count
FROM Claimant_Info
GROUP BY Gender")
# Question 2:  Please write a query using Table 1 to get the count of claimants for each gender. Because Michigan does not require claimants to report their gender, some claimants have NULL gender values, which is usually categorized as “Unspecified”
sqldf("SELECT Gender, COUNT(Gender) as Count
FROM Claimant_Info")
# Question 2:  Please write a query using Table 1 to get the count of claimants for each gender. Because Michigan does not require claimants to report their gender, some claimants have NULL gender values, which is usually categorized as “Unspecified”
sqldf("SELECT Gender, COUNT(Gender) as Count
FROM Claimant_Info
GROUP BY Gender")
# Question 3: Please write a query using Table 2 to list the approved claims filed between the dates of 4/1/2020 and 4/30/2021,
sqldf("SELECT *
FROM Claim_Info
WHERE Status = 'Approved' AND File_Date BETWEEN '4/1/2020' AND '4/30/2021'")
# Question 4: Please write a query using Table 1 and Table 2 to get the sum of the Amount_Paid for each county in Michigan
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) AS 'Sum of Amount Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County desc")
library(tidyverse)
library(readxl)
library(sqldf)
Claimant_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claimant_Info")
Claim_Info <- read_excel("Data/SQL Test.xlsx", sheet = "Claim_Info")
Claim_Info$File_Date <- as.Date(Claim_Info$File_Date)
class(Claim_Info$File_Date)
# Question 4: Please write a query using Table 1 and Table 2 to get the sum of the Amount_Paid for each county in Michigan
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) AS 'Sum of Amount Paid'
FROM Claimant_Info
INNER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County desc")
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) AS 'Sum of Amount Paid'
FROM Claimant_Info
INNER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID")
# Question 4: Please write a query using Table 1 and Table 2 to get the sum of the Amount_Paid for each county in Michigan
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) AS 'Sum of Amount Paid'
FROM Claimant_Info
INNER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County desc")
# Question 4: Please write a query using Table 1 and Table 2 to get the sum of the Amount_Paid for each county in Michigan
sqldf("SELECT County, SUM(Claim_Info.Amount_Paid) AS 'Sum of Amount Paid'
FROM Claimant_Info
FULL OUTER JOIN Claim_Info ON Claimant_Info.Claimant_ID = Claim_Info.Claimant_ID
WHERE County NOT IN ('Cochise', 'Steuben')
GROUP BY County
ORDER BY County desc")
# Mock ESS data to make it simplier for illustrating conversions between dataframes
df1 <- data.frame(ID = c(1, 2, 3, 4, 5),
name = c("John", "Sandy", "Ashley", "David", "Eve"))
df2 <- data.frame(ID = c(3, 4, 6, 7, 8),
country = c("HU", "FR", "FI", "LT", "FR"))
df3 <- data.frame(ID = c(2, 6, 8, 4, 9),
gender = c(1, 2 ,2 ,1 ,2))
full_outer_join_result <- sqldf("SELECT IFNULL(df1.ID, df2.ID) AS ID, name, country
FROM df1
FULL OUTER JOIN df2 ON df1.ID = df2.ID")
View(full_outer_join_result)
#variables: cntry agea gndr edlvdahu (highest level education hungary)
# Inner join - Takes the IDs in df1, finds the same IDs in df2 and combines only those rows together
# (New df altogether, no missings)
inner_join_result <- sqldf("SELECT df1.ID, name, country
FROM df1
INNER JOIN df2 ON df1.ID = df2.ID")
# Inner joining with 3 dfs at once!
inner_join_result3 <- sqldf("SELECT df1.ID, name, country
FROM df1
INNER JOIN df2 ON df1.ID = df2.ID
INNER JOIN df3 ON df1.ID = df3.ID")
# left join - Based on the df1 df, adds the observations from df2 where there is a matching id in df1
# (keeps integrity of df1 df but adds matching info from df2, includes missings)
left_join_result <- sqldf("SELECT df1.ID, name, country
FROM df1
LEFT JOIN df2 ON df1.ID = df2.ID")
# Right Join - Based on the df2 df, adds the observations from df1 where there is a matching id in df2
# (keeps integrity of df2 df but adds matching info from df1, includes missings)
right_join_result <- sqldf("SELECT df1.ID, name, country
FROM df1
RIGHT JOIN df2 ON df1.ID = df2.ID")
# Full outer join - Combines all observations from both df1 and df1, matching on ID where there's observations in both and adding missing values otherwise
# (combines integrity of df1 and df2, includes missings)
full_outer_join_result <- sqldf("SELECT IFNULL(df1.ID, df2.ID) AS ID, name, country
FROM df1
FULL OUTER JOIN df2 ON df1.ID = df2.ID")
# Performing two full outer joins sequentially to merge 3 dfs at once
full_outer_join_result3 <- sqldf("SELECT IFNULL(df1.ID, IFNULL(df2.ID, df3.ID)) AS ID, name, country, gender
FROM df1
FULL OUTER JOIN df2 ON df1.ID = df2.ID
FULL OUTER JOIN df3 ON df1.ID = df3.ID OR df2.ID = df3.ID")
View(left_join_result)
View(right_join_result)
